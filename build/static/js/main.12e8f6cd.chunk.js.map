{"version":3,"sources":["assets/logo.jpg","components/NavBar.js","components/UpdateAddressModal.js","components/AddressCard.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","NavBar","state","isOpen","toggle","_this","setState","react_default","a","createElement","Navbar","color","dark","expand","className","Container","src","logo","alt","NavbarBrand","href","NavbarToggler","onClick","this","Collapse","navbar","Nav","NavItem","NavLink","Component","UpdateAddressModal","modal","name","url","address","console","log","componentWillMount","_callee","regenerator_default","wrap","_context","prev","next","props","scrape","stop","onChange","e","Object","defineProperty","target","value","newAddress","onSubmit","_callee2","_context2","preventDefault","fetch","_id","method","headers","Content-Type","body","JSON","stringify","Button","style","marginBottom","Modal","ModalHeader","ModalBody","Form","FormGroup","Label","for","Input","type","id","marginTop","block","AddressCard","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","data","_this2","then","res","json","map","Card","width","key","CardBody","CardTitle","CardText","components_UpdateAddressModal","App","components_NavBar","components_AddressCard","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.12e8f6cd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.52b14cf9.jpg\";","import React, { Component } from 'react';\nimport { \n  Collapse,\n  Navbar,\n  NavbarToggler,\n  NavbarBrand,\n  Nav,\n  NavItem,\n  NavLink,\n  Container\n} from  'reactstrap';\nimport logo from '../assets/logo.jpg'\n\nclass NavBar extends Component {\n  state = {\n    isOpen: false\n  }\n\n  toggle = () => {\n    this.setState({\n      isOpen: !this.state.isOpen\n    })\n  }\n\n  render() {\n      return (\n        <div>\n          <Navbar color=\"dark\" dark expand=\"sm\" className=\"mb-5\">\n            <Container>\n              <img src={logo} alt=\"\" className=\"mr-5\" />\n              <NavbarBrand href=\"/\">\n                Scraped address\n              </NavbarBrand>\n              <NavbarToggler onClick={this.toggle} />\n              <Collapse isOpen={this.state.isOpen} navbar>\n                <Nav className=\"ml-auto\" navbar>\n                  <NavItem>\n                    <NavLink href=\"https://github.com/TylerOlsen14\">\n                      Github\n                    </NavLink>\n                  </NavItem>\n                </Nav>\n              </Collapse>\n            </Container>\n          </Navbar>\n        </div>\n      )\n  }\n}\n\nexport default NavBar","import React, { Component } from 'react';\nimport {\n  Button, \n  Modal, \n  ModalHeader, \n  ModalBody, \n  Form, \n  FormGroup, \n  Label, \n  Input \n} from 'reactstrap';\n\nclass UpdateAddressModal extends Component {\n  state = {\n    modal: false,\n    name: '',\n    url: '',\n    address: '',\n  }\n\n  toggle = () => {\n    this.setState({\n      modal: !this.state.modal\n    });\n    console.log(this.state)\n  }\n\n  // enterModal = async () => {\n  componentWillMount = async () => {\n    this.setState({\n      name: this.props.scrape.name,\n      url: this.props.scrape.url,\n      address: this.props.scrape.address,\n    })\n  }\n\n  onChange = (e) => {\n    this.setState({ \n      [e.target.name]: e.target.value,\n    });\n    console.log(this.state)\n  }\n  \n  newAddress = {\n    name: this.props.name,\n    url: this.props.url,\n    address: this.props.address\n  }\n\n  onSubmit = async e => {\n    e.preventDefault();\n    await fetch(`https://salty-address-scrape5kitchen.herokuapp.com/`+ this.props.scrape._id, {\n      method: \"PUT\",\n      headers: {\n        'Content-Type': 'application/json'\n        // 'Content-Type': 'application/x-www-form-urlencoded'\n      },\n      body: JSON.stringify({\n        name: this.state.name,\n        address: this.state.address,\n        url: this.state.url,\n      }),\n    })\n    this.toggle();\n    console.log(this.state)\n    // this.props.refresh();//this refreshes the page after we're done\n  };\n    \n  // handleSubmit(e) {\n  //   e.preventDefault();\n  //   console.log(this.state)\n    // this.props.onSubmit(this.state)\n  // }\n\n\n  // componentDidMount() {\n  //   console.log(this.props.id)\n  // }\n\n  render() {\n    return(\n      <div>\n        <Button\n          color=\"dark\"\n          style={{marginBottom: '2rem'}}\n          onClick={this.toggle}\n        >\n          Update Record\n        </Button>\n        <Modal\n          isOpen={this.state.modal}\n          toggle={this.toggle}\n        >\n          <ModalHeader\n            toggle={this.toggle}\n          >\n            Update Address Entry\n          </ModalHeader>\n          <ModalBody>\n            {/* <Form onSubmit={this.onSubmit}>\n              <FormGroup onSubmit={this.handleSubmit}> */}\n            <Form>\n              <FormGroup>\n                <Label for=\"address\">\n                  Make sure the address & name look good\n                </Label>\n                <Input \n                  type=\"text\"\n                  name=\"name\"\n                  id=\"item\"\n                  // placeholder={Client Name}\n                  onChange={this.onChange}\n                  value={this.state.name}\n                />\n                <Input \n                  type=\"string\"\n                  name=\"url\"\n                  id=\"item\"\n                  // placeholder=\"Create Phone Number\"\n                  onChange={this.onChange}\n                  value={this.state.url}\n                />\n                <Input \n                  type=\"text\"\n                  name=\"address\"\n                  id=\"item\"\n                  // placeholder=\"Create coversation record\"\n                  onChange={this.onChange}\n                  value={this.state.address}\n                />\n                <Button\n                  color=\"dark\"\n                  style={{marginTop: '2rem'}}\n                  block\n                  // onClick={this.handleSubmit}\n                  onClick={this.onSubmit}\n                >\n                  Update Entry\n                </Button>\n              </FormGroup>\n            </Form>\n          </ModalBody>\n        </Modal>\n      </div>\n    )\n  }\n}\n\nexport default ( UpdateAddressModal );","import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\n// import array from '../address.json'\nimport { Card, CardText, CardBody, CardTitle } from 'reactstrap'\nimport UpdateAddressModal from './UpdateAddressModal'\n\nclass AddressCard extends Component {\n  constructor() {\n    super();\n    this.state = { data: [] }\n  }\n\n  componentDidMount() {\n    fetch('https://salty-address-scrape5kitchen.herokuapp.com/')\n    .then(res => res.json())\n    .then(json => this.setState({ data: json }))\n  }\n\n  render() {\n    return (\n      <div className=\"AddressCard\">\n        {/* {array.map( scrape => ( */}\n        {this.state.data.map( scrape => (\n          <Card className=\"p-3 m-3\" style={{width:\"300px\"}} key={scrape._id}>\n            <CardBody>\n              <CardTitle><h4>{scrape.name}</h4></CardTitle>\n              <CardText className=\"URL\"><a href={scrape.url}>{scrape.url}</a></CardText>\n              <CardText className=\"Address\">{scrape.address}</CardText>\n            </CardBody>\n            <UpdateAddressModal scrape={scrape} />\n            {/* <updateAddressModal scrape={scrape} refresh={this.getAddress}/>  */}\n          </Card>\n        ))}\n      </div>\n    );\n  }\n}\nexport default AddressCard;","import React from 'react';\nimport './App.css';\n// import NavBar from \"./components/NavBar\";\n// import AddressCard from './components/AddressCard'\nimport NavBar from \"./components/NavBar\";\nimport AddressCard from './components/AddressCard'\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <NavBar />\n\n      <AddressCard />\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}